# Generated by Django 5.2.5 on 2025-08-15 09:04

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('country', models.CharField(db_index=True, max_length=100)),
                ('elevation', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['latitude', 'longitude'], name='weather_loc_latitud_1f8130_idx')],
            },
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('temperature', models.FloatField(help_text='Temperature in Â°C', validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(60)])),
                ('humidity', models.FloatField(help_text='Relative humidity in %', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('wind_speed', models.FloatField(help_text='Wind speed in km/h')),
                ('precipitation', models.FloatField(default=0, help_text='Precipitation in mm')),
                ('weather_type', models.IntegerField(choices=[(0, 'Clear'), (1, 'Cloudy'), (2, 'Rain'), (3, 'Snow'), (4, 'Thunderstorm')], default=0)),
                ('is_forecast', models.BooleanField(default=False)),
                ('forecast_day', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(14)])),
                ('flood_risk', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('storm_risk', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('wildfire_risk', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_data', to='weather.location')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['location', 'timestamp'], name='weather_wea_locatio_441a86_idx'), models.Index(fields=['is_forecast', 'forecast_day'], name='weather_wea_is_fore_f71e75_idx')],
            },
        ),
    ]
